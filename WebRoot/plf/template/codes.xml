<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<sroot>
	<codet>
		<id>jclz</id>
		<name>JCLZ SAMPLE</name>
		<author>zzl</author>
		<version>1.0</version>
		<module>JCLZ</module>
		<code><![CDATA[
package com.more.${dbType};

import com.more.fw.core.bd.service.jobx.Args;
import com.more.fw.core.bd.service.jobx.IJobx;

public class ${Classx} implements IJobx
{
  /**
   * Args 参数设置类
   *  Map<String,Object> params 传人参数
   *  Object result 返回内容
  */
  @Override
  public void exec(Args args) throws Exception
  {
	// TODO
    
  }
}
]]></code>
		<description>定时任务JAVA类管理</description>
	</codet>

	<codet>
		<id>editSuperCode</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import com.more.fw.core.dbo.model.service.impl.base.FuncService;
 /**
  * 1:该抽象类中定义公用方法
  * 2:视图操作功能对应的自定义类中通过拓展公用父类的方式实现自定义类，即可调用的视图公用父类中定义的方法
  */
public abstract class SuperServer implements FuncService 
{

}
]]></code>
		<description>视图公用类</description>
	</codet>

	<codet>
		<id>editCode</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import com.more.fw.core.base.core.action.ModelAction;
import com.more.fw.core.dbo.model.service.ModelService;
import com.more.fw.core.dbo.model.service.impl.base.FuncService;

public class ${Classx} implements FuncService 
{
  /**
  * 1:该方法直接跳过原有的执行逻辑，转向用户自定义的代码，跳转页面也是自定义
  *  要根据  private String viewShowScenc;// 视图显示场景(0:视图页面解析，1同步查询列表数据显示子表单，2异步列表数据显示，3异步列表数据显示子表单...)
  *  这个变量(modelAction.getViewShowScenc())来区分当前是在哪个视图显示场景下。
  *  常量类中可以取到判断的值Constants.VIEW_SHOW_SCENC_0：
  * 2:跳转回原来的视图页面方法：
  *  return modelAction.ActionForwardExeid();// 转向原来视图页面
  *	 return modelAction.ActionForwardExeid(modelAction.getExeid());// 转向原来指定的视图ID页面
  */
	@Override
	public String exeFunc(ModelAction modelAction, ModelService modelService) {
		
		return null;
	}
}
]]></code>
		<description>自定义视图类</description>
	</codet>

	<codet>
		<id>editCodeBf</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import com.more.fw.core.base.core.action.ModelAction;
import com.more.fw.core.dbo.model.service.ModelService;
import com.more.fw.core.dbo.model.service.impl.base.FuncService;

public class ${Classx} implements FuncService 
{
 /**
  *	1:这个类跟自定义视图类的区别是这个方法是嵌入在页面或数据显示之前的一段代码，原有的数据及逻辑流程正常执行，不能改变跳转页面.
  *	 要根据  private String viewShowScenc;// 视图显示场景(0:视图页面解析，1同步查询列表数据显示子表单，2异步列表数据显示，3异步列表数据显示子表单...)
  *	 这个变量(modelAction.getViewShowScenc())来区分当前是在哪个视图显示场景下。
  * 常量类中可以取到判断的值Constants.VIEW_SHOW_SCENC_0：
  */
	@Override
	public String exeFunc(ModelAction modelAction, ModelService modelService) {
		
		return null;
	}
}
]]></code>
		<description>视图/数据显示前执行类</description>
	</codet>

	<codet>
		<id>editSuperCodeChild</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import com.more.fw.core.base.core.action.ModelAction;
import com.more.fw.core.dbo.model.service.ModelService;
 /**
  *要根据对应的视图模型/基础信息：视图公用类的名称来替换继承类SuperServer
  *
  */
public class ${Classx} extends SuperServer
{
	@Override
	public String exeFunc(ModelAction modelAction, ModelService modelService) {
		
		return null;
	}
}
]]></code>
		<description>视图模型/操作功能/源码</description>
	</codet>

	<codet>
		<id>dataValible</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import java.util.Map;
import com.more.fw.core.base.core.action.ModelAction;
import com.more.fw.core.common.exception.OperResult;
import com.more.fw.core.dbo.model.service.ModelService;
import com.more.fw.core.dbo.model.service.impl.base.ValidateFuncService;

public class ${Classx} implements ValidateFuncService{
  /**
   * @param formId
   *          表单ID
   * @param paraMap
   *          数据对象
   * @param modelService
   *          modelService
   * @return OperResult
   */

	@Override
	public OperResult valJavaFun(String formId, Map paraMap,
			ModelService modelService, ModelAction modelAction, Object... objs) {
			
		return null;
	}

}
]]></code>
		<description>有效性验证类源码</description>
	</codet>

	<codet>
		<id>customStyle</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import com.more.fw.core.bd.bcm.model.MsFormColDto;
import com.more.fw.core.common.method.label.MsFormColUiFmFace;

public class ${Classx} implements MsFormColUiFmFace{
	/**
	 * 
	 * @param request
	 *          用户请求对象
	 * @param data
	 *          行数据 map
	 * @parammsFormColDto
	 *          属性
	 * @param index
	 *          行号
	 * @paramviewType
	 *          视图类型(查询列表1,编辑列表2,[自定列表3/修改4/查看5/新增6/配置7 ...])
	 * @paramobjs
	 *          其它动态参数
	 */

	@Override
	public void exec(HttpServletRequest request, Map data,
			MsFormColDto msFormColDto, int index, String viewType,
			Object... objs) {
		
	}

}
]]></code>
		<description>自定义单元格样式</description>
	</codet>

	<codet>
		<id>customContext</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import com.more.fw.core.common.method.label.MsFormColValFmFace;
import com.more.fw.core.cont.formui.FormUiDto;
import com.more.fw.core.cont.formui.HtmlDomBean;

public class ${Classx} implements MsFormColValFmFace{

	@Override
	public void exec(FormUiDto formUiDto, HtmlDomBean htmlDomBean,
			Object... objs) {
		
	}

}

]]></code>
		<description>自定义输出内容</description>
	</codet>

	<codet>
		<id>httpImpl</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import com.more.fw.http.service.HttpCoreService;
import com.more.fw.http.service.IhttpServiceJosn;
import com.more.fw.interf.InterfaceLog;
/**
 * HttpCoreService 提供如下:
 *          Map result; 返回结果类型 key: json为json解析       xml 用xml解析     obj 返回对象
 *          Map<String, String> paramTo; 传递参数   service.getParamTo().get("name");
 *          Map resultDto; xml 解析时需要 对象的 .class：
 *                                      resultName.put("xmlBean", HttpConfigDto.class);
 *                                      service.setResultDto(resultName);
 *          DataInteraction dit;对象传输时用到：
 *                                      service.getDit().get("name");
 *                                      service.getDit().put("name", "test");  
 *          Map paramLog; log日志：
 *                          Map map = service.getParamLog();
 *                          map.put("message","用户自定义信息");
 *                          super.log(map);
 */
public class ${Classx} extends InterfaceLog implements IhttpServiceJosn {

	@Override
	public String exeFunc(HttpCoreService service) {
		
		return null;
	}

}
]]></code>
		<description>http接口</description>
	</codet>
	
	<codet>
		<id>webserviceImpl</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package ${dbType};

import java.util.Map;

import com.more.fw.webservice.service.IWebService;

public class ${Classx} implements IWebService{
/**
 * 
 * @param objs : 可变数组 ：
 *                      Object name = objs[0]; 第一个参数
 *                      Object ages = objs[1]; 第二个参数。。。
 * @return
 * @see com.more.fw.webservice.service.IWebService#excute(java.lang.Object[])
 */
	@Override
	public Map<String, Object> excute(Object... objs) {
		
		return null;
	}

}
]]></code>
		<description>webservice接口</description>
	</codet>

	<codet>
		<id>commCodePage</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package ${dbType};

import com.more.fw.core.base.core.action.ModelAction;
import com.more.fw.core.dbo.model.service.ModelService;
import com.more.fw.core.dbo.model.service.impl.base.FuncService;

public class ${Classx} implements FuncService 
{
	@Override
	public String exeFunc(ModelAction modelAction, ModelService modelService) {
		
		return null;
	}
}
]]></code>
		<description>公用类管理/公用类</description>
	</codet>
	
	<codet>
		<id>autoListener</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import com.more.fw.core.base.core.timer.IJobListener;

public class ${Classx} implements IJobListener
{

  /**
   * 当定时器任务被停止时调用，context为定时器上线文内容；
   * @param context
   * @see org.quartz.JobListener#jobExecutionVetoed(org.quartz.JobExecutionContext)
   */
  @Override
  public void jobExecutionVetoed(JobExecutionContext context)
  {
    // TODO Auto-generated method stub
    
  }
  /**
   * 当定时器任务每次被执行前调用，context为定时器上线文内容；
   * @param context
   * @see org.quartz.JobListener#jobToBeExecuted(org.quartz.JobExecutionContext)
   */
  @Override
  public void jobToBeExecuted(JobExecutionContext context)
  {
    // TODO Auto-generated method stub
    
  }
  /**
   * 当定时器任务每次被执行后调用，context为定时器上线文内容；
   * 其中定义一个对象 triggerResult，作为定时器的执行返回结果，用于接收如webService的返回值得内容；
   * 获取方式：context.getScheduler().getContext().get("triggerResult ");
   * @param arg0
   * @param arg1
   * @see org.quartz.JobListener#jobWasExecuted(org.quartz.JobExecutionContext, org.quartz.JobExecutionException)
   */
  @Override
  public void jobWasExecuted(JobExecutionContext arg0, JobExecutionException arg1)
  {
    // TODO Auto-generated method stub
    
  }
  /**
   * 监听器的内部标示：需要保证唯一性；
   * @return
   * @see org.quartz.JobListener#getName()
   */
  @Override
  public String getName()
  {
    // TODO Auto-generated method stub
    return null;
  }

}
]]></code>
		<description>自定义监听器</description>
	</codet>


	<codet>
		<id>autoTrigger</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import org.quartz.Trigger;

import com.more.fw.core.base.core.timer.ITrigger;

public class ${Classx} implements ITrigger
{
  /**
   * 自定义触发器
   * @param name 名称
   * @param group 分组
   * @return
   * @see com.more.fw.core.base.core.timer.ITrigger#getTrigger(java.lang.String, java.lang.String)
   */
  @Override
  public Trigger getTrigger(String name, String group)
  {
    // TODO Auto-generated method stub
    return null;
  }

}
]]></code>
		<description>自定义触发器</description>
	</codet>
	
	
		<codet>
		<id>mChartInterface</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

import java.util.*;
import com.more.fw.core.dbo.model.service.ModelService;
import com.more.fw.core.sysfa.echarts.interfaces.ChartsInterface;
public class ${Classx} implements ChartsInterface
{

  @Override
  public List<Map<String, Object>> getJavaSourcesData(ModelService modelService)
  {

    return null;
  }

}
]]></code>
		<description>图表接口类</description>
	</codet>
	
	<codet>
		<id>autoParam</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};
import java.util.List;
import java.util.Map;

import com.more.fw.core.base.core.timer.ICustomParameter;

public class ${Classx} implements ICustomParameter
{
  public static String dataAuth;
   /**
   * 将webservice页面组织机构权限下拉框中的值返回到类中提供给用户使用
   * @return
   * 
   */
  public  void setDataAuth(String dataAuth)
  {
    this.dataAuth=dataAuth;
  }
  /**
   * 获取预定义的参数类型
   * @return
   * @see com.more.fw.core.base.core.timer.ICustomParameter#preDefinedType()
   */
  @Override
  public List<String> preDefinedType()
  {

    return null;
  }
  /**
   * 获取参数//在每次调用webService接口前执行该方法，构建返回参数
   * @return
   * @see com.more.fw.core.base.core.timer.ICustomParameter#getParameter()
   */
  @Override
  public Map<String, Object> getParameter()
  {

    return null;
  }

}
]]></code>
		<description>自定义参数 </description>
	</codet>
	
	<codet>
		<id>autoKeyParam</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};
import com.more.fw.core.dbo.model.service.impl.base.MethodClassCodeService;
import com.more.fw.core.sysfa.usermessage.action.UserMessageMangerAction;

public class ${Classx} implements MethodClassCodeService
{

  @Override
  public String exeFunc(UserMessageMangerAction ua)
  {
    // TODO Auto-generated method stub
    return null;
  }

}
]]></code>
		<description>关键数据指标 </description>
	</codet>
	<codet>
		<id>startInterface</id>
		<name>autogeneraion</name>
		<author>bjx</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};
import com.more.fw.core.center.bean.ModuleContext;
import com.more.fw.core.center.bean.ModuleActivator;
/**
 * 模块加载接口,该接口无法复用模块内的任何方法
 * @author Administrator
 *
 */
public class ${Classx} implements ModuleActivator 
{
	/**
	 * 模块(系统)启动前执行,如果执行失败,记录模块启动失败日志
	 * @param context
	 * @throws Exception
	 */
	public void start(ModuleContext context) throws Exception{
	};
	
	/**
	 * 模块(系统)停止前执行
	 * @param context
	 * @throws Exception
	 */
	public void stop(ModuleContext context) throws Exception{
	};
	
	/**
	 * 预安装,模块安装前执行,如果抛出异常,回滚安装操作
	 * @param context
	 * @throws Exception
	 */
	public void preinstall(ModuleContext context) throws Exception{
	};
	
	/**
	 * 模块安装最后执行,如果抛出异常,回滚安装操作
	 * @param context
	 * @throws Exception
	 */
	public void install(ModuleContext context) throws Exception{
	};
	
	/**
	 * 预卸载,模块卸载最后执行,如果抛出异常,回滚卸载操作
	 * @param context
	 * @throws Exception
	 */
	public void preuninstall(ModuleContext context) throws Exception{
	};
	
	/**
	 * 模块卸载最后执行,如果抛出异常,回滚卸载操作
	 * @param context
	 * @throws Exception
	 */
	public void uninstall(ModuleContext context) throws Exception{
	};
}

]]></code>
		<description>微服务启动接口 </description>
	</codet>
	
	
	<codet>
		<id>wssImpl</id>
		<name>autogeneraion</name>
		<author>computer</author>
		<version>1.0</version>
		<module>auto</module>
		<code><![CDATA[
package com.more.${dbType};

public class ${Classx} {

		public String getUserName(String name){
		
			return "";
		}

}
]]></code>
		<description>http接口</description>
	</codet>
</sroot>
